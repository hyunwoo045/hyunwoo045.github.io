---
title: "DevOps 는 무엇인가"
excerpt: "DevOps 에 대해 아주 간단히 정리합니다!"

header:
  overlay_image: https://images.unsplash.com/photo-1501785888041-af3ef285b470?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80
  overlay_filter: 0.5

tags:
  - DevOps

toc: true
toc_label: "table of content"
toc_icon: "bars"
toc_sticky: true
---

# 데브옵스란 ?

```
신입 개발자가 주어진 미션에 관련하여 혼자 독학하고 정리한 내용의 글로 사실과 거리가 멀 수 있습니다.

지적은 저의 성장에 큰 밑거름이 될 것입니다. 감사합니다 :D ( hyunwoo045@gmail.com )
```

---

개발(Dev) + 운영(Ops) 의 합성어로 `고객에게 지속적으로 가치를 제공하도록 지원하는 사람, 프로세스, 기술들의 총집합` 입니다. 최대한 와닿는 정의를 가져왔다고는 하지만, 아예 개발에 대해서 아무 것도 모르거나, '소프트웨어 개발'의 절차에 대해서 낯선 사람이라면 저 정의조차도 와닿지 않을 수 있습니다. 쉽게 얘기해서 Dev+Ops 문자 그대로 개발과 운영을 합친 것입니다. 팀 단위이거나 개인이 개발과 운영을 모두 하는 것이라고 할 수 있습니다.

<br/>

## DevOps 이전엔 어땠을까?

옛날에는 소프트웨어를 개발할 때 어떤 과정을 거쳤을까요? 소프트웨어 개발 방법론 중에는 '폭포수 모델(Waterfall)' 이라고 하는 방법론이 있습니다.

![Waterfall](https://www.smartsheet.com/sites/default/files/styles/1300px/public/waterfall%402x.png?itok=QEzISIit)<br/>
출처: [smartsheet - Waterfall](https://www.smartsheet.com/content-center/best-practices/project-management/project-management-guide/waterfall-methodology)

쇼핑몰 페이지를 하나 만드는 프로젝트가 있다고 가정합시다. 이 프로젝트에 요구된 요구 사항들이 있을 것입니다. 그 요구 사항들을 모두 분석하여 문서화하고, 개발 단계에 필요한 모델들이 무엇이 있는지 디자인하고 개발 기간을 계획합니다. 그리고 계획한 개발 시간 동안 구현을 마치고 테스트를 한 후 배포를 합니다. 이런 일련의 과정이 폭포수처럼 위에서 아래로 떨어진다고 하여 폭포수 모델이라고 합니다.

폭포수 모델에는 한 가지 특징이 있습니다. 폭포수는 거꾸로 흐르지 않듯이, 각 단계들은 병행되거나 반대로 진행되지 않습니다. 요구사항이 조금이라도 수정되면 다시 요구 사항을 분석하고, 디자인하고, 구현하고, 테스트하고, 배포하는 단계를 거쳐야 합니다. 따라서 프로젝트가 매우 체계적이고 진행 상황을 명확히 파악할 수 있다는 장점이 있으면서도, 프로젝트 기간 중 발생한 문제에 대한 대처가 어렵고 변경사항을 수용하기 매우 어렵다는 단점이 있습니다.

개발과 운영의 측면만을 따로 놓고 생각해보죠. <s>다 그렇거나 그랬던 것은 아니겠지만</s> 개발은 정말 말 그대로 개발만 합니다 (Implementation). 요구사항과 일정에 맞춰 개발을 마친 후 운영에게 코드를 전달합니다. 운영은 코드를 전달받아 기존에 있던 코드와 새 코드를 합치고 발생한 에러를 수정한 뒤 (Verification) 배포 및 유지보수(Maintenance) 합니다. 일련의 과정이 거꾸로 흘러가지 않기 때문에 새로운 요구사항이 반영되면 운영에서 코드를 개발로 돌려보낸다거나 하는 일이 없습니다. 새로운 요구 사항이 문서로 작성되고 이에 맞춰 계획된 후에 개발로 넘어가죠.

고객의 피드백에 빠르게 대응해야 하는 서비스의 경우 이러한 개발 방법론은 문제가 큽니다. 고객에게 지속적으로 제공되는 웹 어플리케이션 같은 경우에는 심할 경우 하루 단위로도 피드백이 나올 수 있는데, 이 피드백마다 계획하는 사람 거치고 개발하는 사람 거치고 운영하는 사람 거치면 너무 늦기 때문이죠. 이를 개선하기 위해 다음으로 등장한 소프트웨어 개발 방법론이 `Agile`. 그리고 DevOps 는 그 `Agile` 의 연장선에 있습니다.

<br/>

## DevOps 의 장점

가장 직관적인 DevOps의 장점은 ' 더 나은 제품을 더 빨리 빌드해서 높은 성과를 달성하게 한다. ' 입니다. 추가로 아래와 같은 이점을 더 추가적으로 말할 수 있습니다.

- 유연한 대응과 확장
  - `마이크로 서비스` 아키텍쳐로 앱의 유연성과 혁신의 속도를 높힐 수 있습니다. 또한, 엔지니어가 개발, 테스트, 배포, 운영에 이르기 까지 전체 에플리케이션 수명 주기에 걸쳐 작업하기 때문에 단일 기능에 한정되지 않은 광범위한 기술을 개발할 수 있습니다.
- 시스템 안정성 / 신뢰성 유지
  - 지속적으로 수정 및 배포를 하기 때문에 시스템적인 에러의 발생 확률을 낮출 수 있다는 의미입니다.
  - 소규모 업데이트를 자주 수행하기 때문에 배포의 위험이 줄어들고, 오류가 생기면 어느 버전에서 생겼는지 빠르게 찾을 수 있기 때문에 평균 복구 시간이 빠릅니다. `CI/CD (Continuous Integration/Continuous Deployment)`라고 불리는 '지속적 통합/지속적 배포' 에 대해서 후에 따로 정리하겠습니다.
- 협업 강화
  - 기존에는 따로 떨어져 있던 개발과 운영이 합쳐지기 때문에 소통의 중요성이 강조됩니다. 자연스럽게 협엽이 강화됩니다.
- 보안
  - 계획 단계에서 예상하지 못했던 보안의 문제를 개발 단계에서 찾아내어 해당 문제를 해결하기에 용이합니다.

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]: https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
